generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ✅
model User {
  id          Int      @id @default(autoincrement())
  username    String?  @unique
  firstName   String   @db.VarChar(32)
  lastName    String   @db.VarChar(32)
  imageUrl    String?
  email       String?  @unique
  password    String?
  phoneNumber String?
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bio         String?

  // Relations
  enrolment Enrolment[]
  Course    Course[]
  Post      Post[]

  emailVerified DateTime?
  accounts      Account[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int     @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// ✅
model Enrolment {
  user_id       Int
  course_id     Int
  enrolmentDate DateTime @default(now())

  //Relations
  user   User   @relation(fields: [user_id], references: [id])
  course Course @relation(fields: [course_id], references: [id])

  // Composite primary key
  @@id([user_id, course_id])
}

// ✅
model Course {
  id           Int          @id @default(autoincrement())
  slug         String       @unique
  title        String
  description  String       @db.VarChar(500)
  content      String       @db.Text
  imageUrl     String
  level        Level
  status       CourseStatus
  price        Int
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  instructorId Int
  discountId   String?
  //Relations
  discount     Discount?     @relation(fields: [discountId], references: [id], onDelete: Cascade)
  instructor   User         @relation(fields: [instructorId], references: [id])
  Enrolment    Enrolment[]
  tag          CourseTag[]
}

// ✅
model Post {
  id           Int      @id @default(autoincrement())
  slug         String   @unique
  title        String   @db.VarChar(255)
  content      String   @db.Text
  imageUrl     String
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt
  authorId     Int
  isEditorPick Boolean? @default(false)
  readingTime  Int

  // Relations
  author User  @relation(fields: [authorId], references: [id])
  tags   Tag[] // ✅ Many-to-many without a junction table
}

// ✅
model Tag {
  id      Int         @id @default(autoincrement())
  name    String      @unique
  posts   Post[]
  courses CourseTag[]
}

// ✅
model CourseTag {
  course_id Int
  tag_id    Int
  // Relations
  course    Course @relation(fields: [course_id], references: [id])
  tag       Tag    @relation(fields: [tag_id], references: [id])

  // Composite primary key
  @@id([course_id, tag_id])
}

model ContactMessage {
  id        String        @id @default(cuid())
  fullName  String
  email     String
  phone     String?
  title     String
  message   String
  status    MessageStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Discount {
  id         String    @id @default(cuid())
  percentage Int
  startsAt   DateTime  @default(now())
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  Course     Course[]
}

enum MessageStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

// ✅
enum Role {
  USER
  INSTRUCTOR
  AUTHOR
  INSTRUCOT_AUTHOR
  ADMIN
}

// ✅
enum Level {
  BEGINNER
  ADVANCED
  EXPERT
}

// ✅
enum CourseStatus {
  COMPLETED
  PREORDER
  ONGOING
  CANCELLED
  UPCOMING
}